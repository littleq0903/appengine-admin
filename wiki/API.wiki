#summary Application Programming Interface documentation
#labels Featured

= Contents =
<wiki:toc max_depth="2" />

= Python package name =

To use Appengine Admin [http://code.google.com/p/appengine-admin/source/checkout check it out] via [http://subversion.tigris.org/ Subversion] using `appengine_admin` as directory name.

Import Appengine Admin into your scripts:
{{{
import appengine_admin
}}}

= Compatibility =
Appengine Admin is compatible with Python 2.5 and more recent Python 2.x versions.

= Available objects =
Classes:
  * !ModelAdmin
  * Admin
Functions:
  * register
  * getModelAdmin

= Classes =
== !ModelAdmin ==
Use this class as base for your model registration to admin site.

Available settings:
  * model - `google.appengine.ext.db.model` derived class that describes your data model
  * listFields - list of field names that should be shown in list view
  * editFields - list of field names that that should be used as editable fields in admin interface
  * readonlyFields - list of field names that should be used as read-only fields in admin interface
  * listGql - GQL statement for record ordering/filtering/whatever_else in list view

Sample usage:
{{{
from google.appengine.ext import db
import appengine_admin

class Article(db.Model):
    """Your data model
    """
    title = db.StringProperty("Title", required = True)
    content = db.TextProperty("Content", required = True)
    whencreated = db.DateTimeProperty("Created", auto_now_add = True)
    whenupdated = db.DateTimeProperty("Updated", auto_now = True)

class AdminArticle(appengine_admin.ModelAdmin):
    """Appengine Admin settings for the model
    """
    model = Article
    listFields = ('title', 'whencreated', 'whenupdated')
    editFields = ('title', 'content')
    readonlyFields = ('whencreated', 'whenupdated')
    listGql = 'order by whencreated desc'
}}}

== Admin ==
Use this class as view in your URL scheme definitions.
Admin class is derived from `google.appengine.ext.webapp.RequestHandler` so it contains every property and method that is available for `google.appengine.ext.webapp.RequestHandler`

Additional instance properties:
  * models - Aplphabetically sorted list of registered models
  * urlPrefix - URL prefix that is set for Appengine Admin urls, e.g. "/admin".
Additional methods:
  * index_get
  Show Appengine Admin start page
  * new_get
  Attribute: modelName

  Show form for creating new record of particular model
  * new_post
  Attribute: modelName

  Create new record of particular model
  * edit_get
  Attributes: modelName, key

  Show for for editing existing record of particular model.
  * edit_post
  Attributes: modelName, key

  Save details for already existing record of particular model.
  * delete_get
  Attributes: modelName, key

  Delete record of particular model.

Sample usage:
{{{
from google.appengine.ext import webapp

application = webapp.WSGIApplication([
    ...
    # Admin pages
    (r'^(/admin)(.*)$', appengine_admin.Admin),
    ...
])
}}}

= Functions =
  * register
  Attributes: Classes (not class instances or objects!) that are derived from !ModelAdmin.
  
  Registers !ModelAdmin instance for corresponding model.
  Only one !ModelAdmin instance per model can be active.
  In case if more !ModelAdmin instances with same model are registered last registered instance will be the active one.

  Sample usage:
{{{
import appengine_admin

appengine_admin.register(AdminArticle)
}}}

= Tips and tricks =
== String represenatation of model instances ==
Define `__str__` method for your model classes as Appengine Admin uses it when displaying choices for referenced field in _edit_ and _new_ views.

Sample usage:
{{{
class Article(db.Model):
    """Your data model
    """
    title = db.StringProperty("Title", required = True)
    content = db.TextProperty("Content", required = True)

    def __str__(self):
        return str(self.title)
}}}

If your model's `__str__` method returns text in different encoding than system's default (e.g., latin-1) then use decorator `encoded_str_utf8` for UTF-8 data or `encoded_str(encoding='encoding_name')` for any other encoding.

Sample usage:
{{{
from google.appengine.ext import db
from appengine_admin.encoding import encoded_str, encoded_str_utf8

class ReferencedModel(db.Model):
    name = db.StringProperty("Name", required = True) # Contains UTF-8 encoded text
   
    @encoded_str_utf8
    def __str__(self):
        return self.name

class AnotherReferencedModel(d
    name = db.StringProperty("Name", required = True) # Contains Windows-1257 encoded text
   
    @encoded_str(encoding = 'windows-1257')
    def __str__(self):
        return self.name
}}}

== verbose_name ==
Appengine Admin makes use of [http://code.google.com/appengine/docs/datastore/propertyclass.html#Property verbose_name] setting of your model properties to create labels for fields in Appengine Admin panel.

Sample usage:
{{{
class Article(db.Model):
    """Your data model
    """
    title = db.StringProperty("Title", required = True)
    content = db.TextProperty("Content", required = True)

class Comment(db.Model):
    article = db.ReferenceProperty(Article, verbose_name = "Article")
    author = db.StringProperty("Author", required = True)
    content = db.TextProperty("Content", required = True)
}}}